apiVersion: v1
kind: Namespace
metadata:
  name: sso
  labels:
    istio-injection: enabled

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: sso
data:
  FLASK_ENV: development
  FLASK_APP: flaskr
  SECRET_KEY: 'secret key'
  DB_HOSTNAME: db.sso
  DB_USERNAME: root
  DB_PASSWORD: pass
  DB_NAME: sso
  USERS_SERVICE_URL: 'http://webhost.users'
  GRAYLOG_HOST: 'graylog.graylog'
  APPS_CREDENTIALS: '{"mailer":"JDJ5JDEyJFg1ZEdPMHRab2NKQ1JDemZiUWJDQXVFRzNTbTNYdkRSNHdkY2hlMTh6RFVKdEt6d1JmVC4y", "users":"JDJ5JDEyJHRBamltalJFa1p1aksweS80R1pPcE94Rjg1ZkZFUlROV0phN05pTFF0RUJpSDYvTnFMMWth"}'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice
  namespace: sso
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sso
  template:
    metadata:
      labels:
        app: sso
    spec:
      containers:
        - name: node
          image: docker.pkg.github.com/w473/sso-microservice/sso-ms:0.0.1
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
          resources:
            requests:
              memory: '64Mi'
              cpu: '250m'
            limits:
              memory: '128Mi'
              cpu: '500m'
          envFrom:
            - configMapRef:
                name: app-config
      imagePullSecrets:
        - name: regcred

---
apiVersion: v1
kind: Service
metadata:
  name: webhost
  namespace: sso
spec:
  selector:
    app: sso
  ports:
    - protocol: TCP
      name: http-app
      port: 80
      targetPort: 5000

---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: gateway
  namespace: sso
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http-sso
        protocol: HTTP
      hosts:
        - 'sso.local'

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: www
  namespace: sso
spec:
  hosts:
    - 'sso.local'
  gateways:
    - gateway
  http:
    - route:
        - destination:
            port:
              number: 80
            host: webhost

---
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: sso
data:
  MYSQL_ROOT_PASSWORD: cGFzcw==

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-pvc
  namespace: sso
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: sso
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      volumes:
        - name: db
          persistentVolumeClaim:
            claimName: db-pvc
      containers:
        - name: mysql
          image: mysql:8.0
          ports:
            - containerPort: 3306
          resources:
            requests:
              memory: '64Mi'
              cpu: '250m'
            limits:
              memory: '1Gi'
              cpu: '1'
          envFrom:
            - secretRef:
                name: db-secret
          volumeMounts:
            - mountPath: '/var/data/mysql'
              name: db
      imagePullSecrets:
        - name: regcred

---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: sso
spec:
  selector:
    app: db
  ports:
    - protocol: TCP
      name: tcp-db
      port: 3306
